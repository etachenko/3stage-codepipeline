Parameters:
  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]
    ConstraintDescription: Must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 key pair.

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: "10.0.0.0/16"
      Tags:
        - Key: Name
          Value: MyCustomVPC

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.0.0/24"
      #AvailabilityZone: !Select [0, !GetAZs !Ref "AWS::Region"]  # Replace with desired AZ if specific

  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
        - CidrIp: !Ref SSHLocation
          FromPort: '22'
          ToPort: '22'
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: WebServerSecurityGroup

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId #!Sub "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
      #SubnetId: !Ref MySubnet  Use the subnet created in MySubnet resource
      #SecurityGroupIds:
       # - !GetAtt WebServerSecurityGroup.GroupId
      NetworkInterfaces:
        - AssociatePublicIpAddress: true  # Assigns a public IP to the instance
          DeviceIndex: '0'
          SubnetId: !Ref MySubnet
          GroupSet:
            - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<html><body><h1>AUTOMATION CLASS HITS HARD NEED 2 DAYS in ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

      Tags:
        - Key: Name
          Value: WebServer

Outputs:

  VpcId:
    Description: VPC ID
    Value: !Ref MyVPC
    Export:
      Name: !Sub '${AWS::StackName}-VpcId'

  SubnetId:
    Description: Subnet ID
    Value: !Ref MySubnet
    Export:
      Name: !Sub '${AWS::StackName}-SubnetId'

  WebServerSecurityGroupId:
    Description: Security group ID of the web server instance
    Value: !GetAtt WebServerSecurityGroup.GroupId
    Export:
      Name: !Sub '${AWS::StackName}-WebServerSecurityGroupId'


  WebServerInstancePublicIp:
    Description: Public IP address of the web server instance
    Value: !GetAtt
      - WebServerInstance
      - PublicIp
    Export:
      Name: !Sub '${AWS::StackName}-WebServerPublicIp'

  WebServerInstanceId:
    Description: Instance ID of the web server instance
    Value: !Ref WebServerInstance
    Export:
      Name: !Sub '${AWS::StackName}-WebServerInstanceId'

  
  

  




